<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大海 大田 小花园</title>
  
  <subtitle>一起在平凡的日子里找到温暖和希望</subtitle>
  <link href="https://xccyzz.github.io/atom.xml" rel="self"/>
  
  <link href="https://xccyzz.github.io/"/>
  <updated>2024-09-17T01:07:13.192Z</updated>
  <id>https://xccyzz.github.io/</id>
  
  <author>
    <name>Hello_Rock</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://xccyzz.github.io/2024/09/17/test/"/>
    <id>https://xccyzz.github.io/2024/09/17/test/</id>
    <published>2024-09-17T01:07:13.192Z</published>
    <updated>2024-09-17T01:07:13.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标题的用法"><a href="#标题的用法" class="headerlink" title="标题的用法"></a>标题的用法</h1><pre><code>标题主要靠“#”符号来控制。</code></pre><h1 id="字体的控制"><a href="#字体的控制" class="headerlink" title="字体的控制"></a>字体的控制</h1><pre><code>字体的加粗等主要靠*来控制，例如：</code></pre><p><strong>这个是加粗字体</strong></p><p><em>这个是斜体</em></p><p><em><strong>这个是粗斜体</strong></em></p><h1 id="引用的控制"><a href="#引用的控制" class="headerlink" title="引用的控制"></a>引用的控制</h1><p>引用就是将一部分内容放入循环嵌套的一个文字体中，例如：</p><blockquote><p>这里是文字的开始</p><blockquote><p>这里开始引用第一个层级的内容</p><blockquote><p>这里开始引用第二个层级的内容</p></blockquote></blockquote></blockquote><hr><h2 id="图片的引用"><a href="#图片的引用" class="headerlink" title="图片的引用"></a>图片的引用</h2><p>图床的模式，就是将描述和图片的链接规则化的整理到文档中，例如网上有个图片的地址为“<a href="https://pica.zhimg.com/80/v2-8888d38bb35ed58844bd6bd5c7a63181_1440w.jpg?source=1940ef5c%E2%80%9D">https://pica.zhimg.com/80/v2-8888d38bb35ed58844bd6bd5c7a63181_1440w.jpg?source=1940ef5c”</a></p><p><img src="%E8%BF%99%E9%87%8C%E6%98%AF%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="这里的这一段是图片的介绍" title="这里是图片说明"></p><p><img src="https://pica.zhimg.com/80/v2-8888d38bb35ed58844bd6bd5c7a63181_1440w.jpg?source=1940ef5c" alt="示例图片" title="这里是图片说明"></p><h2 id="超链接的引用"><a href="#超链接的引用" class="headerlink" title="超链接的引用"></a>超链接的引用</h2><p><a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80" title="title">超链接说明</a></p><p>例如：<br><a href="http://www.baidu.com/" title="百度">百度网</a></p><h2 id="代码的引用"><a href="#代码的引用" class="headerlink" title="代码的引用"></a>代码的引用</h2><p>这里是要用反引号来引用的</p><p>反引号在~线的按键上</p><p>似乎用tab是同样的效果</p><pre><code>int a=1</code></pre><p><code>int a =1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a=1</span><br><span class="line">int b=1</span><br></pre></td></tr></table></figure><pre><code>`代码内容`</code></pre><h2 id="表格的初步设计"><a href="#表格的初步设计" class="headerlink" title="表格的初步设计"></a>表格的初步设计</h2><table><thead><tr><th align="center">张三</th><th align="center">李四</th><th align="center">王五</th></tr></thead><tbody><tr><td align="center">可以</td><td align="center">是不是</td><td align="center">是的</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;标题的用法&quot;&gt;&lt;a href=&quot;#标题的用法&quot; class=&quot;headerlink&quot; title=&quot;标题的用法&quot;&gt;&lt;/a&gt;标题的用法&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;标题主要靠“#”符号来控制。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;字体的控制&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在VPS上设置并使用Gmail API进行自动化邮件管理</title>
    <link href="https://xccyzz.github.io/2024/09/16/Gmail_API_Automation/"/>
    <id>https://xccyzz.github.io/2024/09/16/Gmail_API_Automation/</id>
    <published>2024-09-16T07:20:23.218Z</published>
    <updated>2024-09-16T07:20:23.218Z</updated>
    
    <content type="html"><![CDATA[<p>在现代网络应用中，自动化邮件处理已成为提升工作效率和管理能力的重要手段。通过在虚拟私人服务器（VPS）上设置Gmail API，开发者和用户可以实现自动化读取、分类、回复甚至发送邮件。然而，由于VPS通常无法直接调用浏览器进行OAuth授权，本文将详细介绍如何在VPS上设置Gmail API凭据并使用Python操作Gmail邮箱，解决VPS环境下的授权难题，其实这次的主要想法是，我可以直接将待发布的博客md文件发送至特定邮箱，后台通过自动化的方式实现不可发布同步到github。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E5%89%8D%E8%A8%80%E4%B8%BA%E4%BD%95%E9%80%89%E6%8B%A9%E4%BD%BF%E7%94%A8gmail-api">前言：为何选择使用Gmail API</a></li><li><a href="#%E6%95%99%E7%A8%8B%E6%AD%A5%E9%AA%A4">教程步骤</a><ul><li><a href="#1-%E5%9C%A8google-cloud-console%E4%B8%AD%E8%AE%BE%E7%BD%AEgmail-api%E5%87%AD%E6%8D%AE">1. 在Google Cloud Console中设置Gmail API凭据</a><ul><li><a href="#%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3">步骤详解</a></li></ul></li><li><a href="#2-%E4%BD%BF%E7%94%A8oauth-20-playground%E7%94%9F%E6%88%90tokenjson%E6%96%87%E4%BB%B6">2. 使用OAuth 2.0 Playground生成token.json文件</a></li><li><a href="#3-%E4%B8%8A%E4%BC%A0%E5%87%AD%E6%8D%AE%E5%88%B0vps">3. 上传凭据到VPS</a></li><li><a href="#4-%E7%BC%96%E5%86%99python%E4%BB%A3%E7%A0%81%E4%BB%A5%E6%A3%80%E7%B4%A2%E6%9C%AA%E8%AF%BB%E9%82%AE%E4%BB%B6">4. 编写Python代码以检索未读邮件</a></li><li><a href="#5-%E5%9C%A8vps%E4%B8%8A%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81">5. 在VPS上运行代码</a></li></ul></li><li><a href="#%E9%99%84%E5%8A%A0%E5%BB%BA%E8%AE%AE">附加建议</a><ul><li><a href="#%E5%AE%89%E5%85%A8%E6%80%A7%E6%8F%90%E7%A4%BA">安全性提示</a></li><li><a href="#%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95">日志记录</a></li></ul></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul><h2 id="前言：为何选择使用Gmail-API"><a href="#前言：为何选择使用Gmail-API" class="headerlink" title="前言：为何选择使用Gmail API"></a>前言：为何选择使用Gmail API</h2><p>利用Gmail API进行邮件管理具有多方面的优势：</p><ul><li><strong>自动化处理</strong>：自动分类、归档、回复或转发邮件，提升工作效率。</li><li><strong>集成能力</strong>：与其他应用或服务（如数据库、分析工具）无缝集成，实现复杂的数据处理和工作流。</li><li><strong>安全性高</strong>：通过OAuth 2.0进行认证，确保用户数据的安全和隐私。</li><li><strong>功能丰富</strong>：相比传统的IMAP/SMTP协议，Gmail API提供更全面和细粒度的控制。</li></ul><p>在VPS环境下进行设置，可以实现24/7的邮件管理服务，适用于需要持续监控和处理邮件的场景，如客户支持系统、邮件备份工具等。</p><h2 id="教程步骤"><a href="#教程步骤" class="headerlink" title="教程步骤"></a>教程步骤</h2><h3 id="1-在Google-Cloud-Console中设置Gmail-API凭据"><a href="#1-在Google-Cloud-Console中设置Gmail-API凭据" class="headerlink" title="1. 在Google Cloud Console中设置Gmail API凭据"></a>1. 在Google Cloud Console中设置Gmail API凭据</h3><h4 id="步骤详解"><a href="#步骤详解" class="headerlink" title="步骤详解"></a>步骤详解</h4><ol><li><p><strong>创建项目</strong>：</p><ul><li>登录到 <a href="https://console.cloud.google.com/">Google Cloud Console</a>。</li><li>在顶部导航栏中选择现有项目，或点击“新建项目”创建一个新项目。</li></ul></li><li><p><strong>启用Gmail API</strong>：</p><ul><li>在左侧导航菜单中，选择“API和服务” &gt; “库”。</li><li>在搜索栏中输入“Gmail API”，点击进入并选择“启用”。</li></ul></li><li><p><strong>创建OAuth 2.0凭据</strong>：</p><ul><li>导航到“API和服务” &gt; “凭据”。</li><li>点击“创建凭据”按钮，选择“OAuth客户端ID”。</li><li>如果首次创建，需先配置OAuth同意屏幕：<ul><li>选择“外部”用户类型，点击“创建”。</li><li>填写应用名称、支持电子邮件等必要信息，保存配置。</li></ul></li><li>返回“创建凭据”流程，选择应用类型为“桌面应用”，点击“创建”。</li><li>下载生成的<code>credentials.json</code>文件，妥善保管。</li></ul></li></ol><h3 id="2-使用OAuth-2-0-Playground生成token-json文件"><a href="#2-使用OAuth-2-0-Playground生成token-json文件" class="headerlink" title="2. 使用OAuth 2.0 Playground生成token.json文件"></a>2. 使用OAuth 2.0 Playground生成token.json文件</h3><p>由于VPS上无法直接使用浏览器进行OAuth授权，需在本地使用OAuth 2.0 Playground生成<code>token.json</code>文件。</p><ol><li><p><strong>访问OAuth 2.0 Playground</strong>：</p><ul><li>打开 <a href="https://developers.google.com/oauthplayground">OAuth 2.0 Playground</a>。</li></ul></li><li><p><strong>配置OAuth 2.0 Playground</strong>：</p><ul><li>点击右上角的“设置”按钮（齿轮图标）。</li><li>选择“使用您自己的OAuth凭据”，输入在Google Cloud Console中创建的客户端ID和客户端密钥，保存设置。</li></ul></li><li><p><strong>授权Gmail API</strong>：</p><ul><li>在Step 1中，选择<code>Gmail API v1</code>，并选择所需的授权范围，例如<code>https://www.googleapis.com/auth/gmail.readonly</code>。</li><li>点击“授权API”按钮，选择您的Google账户进行授权。</li></ul></li><li><p><strong>交换授权码</strong>：</p><ul><li>在Step 2中，点击“交换授权码以获取令牌”。</li><li>复制生成的访问令牌和刷新令牌，并将其保存为<code>token.json</code>文件。</li></ul></li></ol><h3 id="3-上传凭据到VPS"><a href="#3-上传凭据到VPS" class="headerlink" title="3. 上传凭据到VPS"></a>3. 上传凭据到VPS</h3><p>将生成的<code>credentials.json</code>和<code>token.json</code>文件上传到VPS。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.credentials</span><br><span class="line">scp path/to/credentials.json user@your_vps_ip:~/.credentials/</span><br><span class="line">scp path/to/token.json user@your_vps_ip:~/.credentials/</span><br><span class="line">chmod 600 ~/.credentials/credentials.json</span><br><span class="line">chmod 600 ~/.credentials/token.json</span><br></pre></td></tr></table></figure><h3 id="4-编写Python代码以检索未读邮件"><a href="#4-编写Python代码以检索未读邮件" class="headerlink" title="4. 编写Python代码以检索未读邮件"></a>4. 编写Python代码以检索未读邮件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> google.oauth2.credentials <span class="keyword">import</span> Credentials</span><br><span class="line"><span class="keyword">from</span> googleapiclient.discovery <span class="keyword">import</span> build</span><br><span class="line"><span class="keyword">from</span> googleapiclient.errors <span class="keyword">import</span> HttpError</span><br><span class="line"></span><br><span class="line">CREDENTIALS_PATH = os.path.expanduser(<span class="string">&#x27;~/.credentials/credentials.json&#x27;</span>)</span><br><span class="line">TOKEN_PATH = os.path.expanduser(<span class="string">&#x27;~/.credentials/token.json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    creds = Credentials.from_authorized_user_file(TOKEN_PATH, scopes=[<span class="string">&#x27;https://www.googleapis.com/auth/gmail.readonly&#x27;</span>])</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;加载凭据失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    service = build(<span class="string">&#x27;gmail&#x27;</span>, <span class="string">&#x27;v1&#x27;</span>, credentials=creds)</span><br><span class="line">    results = service.users().messages().<span class="built_in">list</span>(userId=<span class="string">&#x27;me&#x27;</span>, labelIds=[<span class="string">&#x27;UNREAD&#x27;</span>], maxResults=<span class="number">10</span>).execute()</span><br><span class="line">    messages = results.get(<span class="string">&#x27;messages&#x27;</span>, [])</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> messages:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有未读邮件。&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未读邮件列表：&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> message <span class="keyword">in</span> messages:</span><br><span class="line">            msg = service.users().messages().get(userId=<span class="string">&#x27;me&#x27;</span>, <span class="built_in">id</span>=message[<span class="string">&#x27;id&#x27;</span>]).execute()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;邮件摘要: <span class="subst">&#123;msg[<span class="string">&#x27;snippet&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> HttpError <span class="keyword">as</span> error:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;An error occurred: <span class="subst">&#123;error&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="5-在VPS上运行代码"><a href="#5-在VPS上运行代码" class="headerlink" title="5. 在VPS上运行代码"></a>5. 在VPS上运行代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br><span class="line">pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client</span><br><span class="line">python your_script.py</span><br></pre></td></tr></table></figure><h2 id="附加建议"><a href="#附加建议" class="headerlink" title="附加建议"></a>附加建议</h2><h3 id="安全性提示"><a href="#安全性提示" class="headerlink" title="安全性提示"></a>安全性提示</h3><p>确保<code>credentials.json</code>和<code>token.json</code>文件仅对应用程序可读：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 ~/.credentials/credentials.json</span><br><span class="line">chmod 600 ~/.credentials/token.json</span><br></pre></td></tr></table></figure><h3 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(filename=<span class="string">&#x27;gmail_api.log&#x27;</span>, level=logging.INFO,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s:%(levelname)s:%(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    logging.info(<span class="string">&#x27;成功获取未读邮件列表&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> HttpError <span class="keyword">as</span> error:</span><br><span class="line">    logging.error(<span class="string">f&quot;An error occurred: <span class="subst">&#123;error&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文详细介绍了如何在VPS上设置Gmail API凭据，并使用Python脚本进行自动化邮件管理。通过分步骤的指导，解决了VPS环境下无法直接调用浏览器进行OAuth授权的问题，提供了一个可行的解决方案。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在现代网络应用中，自动化邮件处理已成为提升工作效率和管理能力的重要手段。通过在虚拟私人服务器（VPS）上设置Gmail API，开发者和用户可以实现自动化读取、分类、回复甚至发送邮件。然而，由于VPS通常无法直接调用浏览器进行OAuth授权，本文将详细介绍如何在VPS上设置</summary>
      
    
    
    
    <category term="技术博客" scheme="https://xccyzz.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Gmail API" scheme="https://xccyzz.github.io/tags/Gmail-API/"/>
    
    <category term="Python" scheme="https://xccyzz.github.io/tags/Python/"/>
    
    <category term="VPS" scheme="https://xccyzz.github.io/tags/VPS/"/>
    
    <category term="自动化" scheme="https://xccyzz.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>随笔：读刘震云的《一日三秋》</title>
    <link href="https://xccyzz.github.io/2024/09/16/%E4%B8%80%E6%97%A5%E4%B8%89%E7%A7%8B%E8%AF%BB%E4%B9%A6%E9%9A%8F%E7%AC%94/"/>
    <id>https://xccyzz.github.io/2024/09/16/%E4%B8%80%E6%97%A5%E4%B8%89%E7%A7%8B%E8%AF%BB%E4%B9%A6%E9%9A%8F%E7%AC%94/</id>
    <published>2024-09-15T16:00:00.000Z</published>
    <updated>2024-09-16T12:10:02.401Z</updated>
    
    <content type="html"><![CDATA[<p>拿起《一日三秋》，刘震云的故事总是让我心里翻涌着情绪。最早接触他的文字时，我也许没有意识到他是如何在字里行间藏起了沉重，但随着岁月的积累，才发现他深刻地理解人性，却从不提及“人性”这个词。他不评判时代，但他的每一个人物都生活在时代的影子下，像命运的木偶，被无形的线牵引，却从不质疑这背后的力量。</p><p>记得书中有一段写到：“明亮觉得，干净都是从不干净来的。也许万物同理，世间很多事情也如此。”这句话让我久久无法释怀。我们追求的“干净”，何尝不是从“泥泞”中洗净？正如那些我们渴望的人生美好，也许根源不一定是纯洁无瑕的，但经过无数的磨砺后，依然能绽放出耀眼的光芒。</p><p>再想起书中的樱桃，她的人生何尝不是一场荒诞的悲剧？从戏里扮演白娘子，到现实中她被命运击倒，这个角色的命运总让我想起某些电影中的人物。她们在镜头前光彩照人，在现实中却无处可逃。樱桃死后化为冤魂，这让我不禁感叹，连死后也无法解脱的命运，是否真的值得抗争？</p><p>再比如：“陈长杰觉得自己把自己活成了一个笑话。”当看到这一句时，我几乎可以感同身受。人生有时就是这样，明明在最初时怀揣着伟大的梦想，但到了最后，才发现不过是场闹剧。书中提到的“孙二货”狗的故事更是妙不可言，他将仇人的名字给了狗，却和狗建立了深厚的感情。这种荒诞的反转，恰恰揭示了生活的无奈与复杂。</p><p>其实我在读这本书时，总会想：坚持和追求是什么？书中的人物经历了一切，却在命运的裹挟下，仍然未能找到答案。我不禁也开始问自己，是否所有的执着和努力，最终都会成为命运的玩笑？这一问题，恐怕永远没有确切的答案。</p><p>接下来，我摘录了一些让我印象深刻的文字，这些句子像一面面镜子，映照出人生的多个维度：</p><ol><li>“天蓬元帅的店，从根上起，开得有些脏。”</li><li>“干净都是从不干净来的，也许万物同理。”</li><li>“明亮也就是想想，无法对人说，长时间不说，渐也就不理会了。”</li><li>“马道婆说，冤魂若不散，必有未了之事。”</li><li>“人生如戏，戏如人生。”</li><li>“樱桃在乱坟岗上，被野鬼欺凌。”</li><li>“冷幽国的玩笑，讲的是真玩笑，活泼族开的是假玩笑。”</li><li>“花二郎苦等千年，却因面子不能忘。”</li><li>“花二娘最终活成了一个笑话。”</li><li>“只有直面现实，笑看苦难，才有可能得到真正的解脱。”</li><li>“孙二货羞辱了陈明亮，但最后却成了他的义犬。”</li><li>“陈长杰活到最后，觉得自己把自己活成了一个笑话。”</li><li>“活泼族四王子为了讨好国王，假装爱听笑话。”</li><li>“樱桃的冤魂依然在找寻儿子，无法超脱。”</li><li>“明亮追逐着枣树打成的家具，却永远找不到它们。”</li><li>“有慧根的人，才能悟出这些命运的因果。”</li><li>“所有的故事无非家长里短，但却又隐含着深刻的宿命感。”</li><li>“认命是中国民间最普遍的哲学，正如鲁迅批判的阿Q精神。”</li><li>“六叔画的猴，正是他自己的写照，浑身道道血痕。”</li><li>“孙二货上辈子是猫精，而陈明亮的妈妈是‘蛇精’，命运的对决不可避免。”</li></ol><p>这些句子像人生的碎片，拼凑出《一日三秋》的复杂世界。在这个世界里，每一个角色都在追寻自己的答案，却似乎从未找到过真正的解脱。</p><p><img src="https://raw.githubusercontent.com/xccyzz/img/main/img/20240916184316.png" alt="A figure stands alone at dusk"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;拿起《一日三秋》，刘震云的故事总是让我心里翻涌着情绪。最早接触他的文字时，我也许没有意识到他是如何在字里行间藏起了沉重，但随着岁月的积累，才发现他深刻地理解人性，却从不提及“人性”这个词。他不评判时代，但他的每一个人物都生活在时代的影子下，像命运的木偶，被无形的线牵引，却从</summary>
      
    
    
    
    <category term="读书随笔" scheme="https://xccyzz.github.io/categories/%E8%AF%BB%E4%B9%A6%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="人性" scheme="https://xccyzz.github.io/tags/%E4%BA%BA%E6%80%A7/"/>
    
    <category term="时代" scheme="https://xccyzz.github.io/tags/%E6%97%B6%E4%BB%A3/"/>
    
    <category term="宿命" scheme="https://xccyzz.github.io/tags/%E5%AE%BF%E5%91%BD/"/>
    
    <category term="刘震云" scheme="https://xccyzz.github.io/tags/%E5%88%98%E9%9C%87%E4%BA%91/"/>
    
    <category term="思考" scheme="https://xccyzz.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>基于深度学习的光谱成像：综述</title>
    <link href="https://xccyzz.github.io/2024/09/16/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%85%89%E8%B0%B1%E6%88%90%E5%83%8F%E7%BB%BC%E8%BF%B0/"/>
    <id>https://xccyzz.github.io/2024/09/16/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%85%89%E8%B0%B1%E6%88%90%E5%83%8F%E7%BB%BC%E8%BF%B0/</id>
    <published>2024-09-15T16:00:00.000Z</published>
    <updated>2024-09-16T08:32:30.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>光谱成像是一项强大的技术，在遥感、医学诊断等领域具有广泛的应用。传统的光谱成像方法，如扫帚式或推帚式扫描，尽管有效，但由于系统体积大和数据采集速度慢，限制了其应用。随着计算方法的进步，尤其是深度学习的引入，光谱重建速度大大提高，同时系统也更加紧凑。本文综述了各种基于深度学习的光谱成像方法，并对其进行了分类和分析。</p><p><img src="https://www.nature.com/articles/s41377-022-00743-6/figures/1" alt="光谱成像方法"></p><h2 id="振幅编码光谱成像"><a href="#振幅编码光谱成像" class="headerlink" title="振幅编码光谱成像"></a>振幅编码光谱成像</h2><p>振幅编码方法使用编码孔径和色散元件进行压缩光谱成像。经典的系统之一是双色散CASSI系统，它通过调制光线并压缩数据来进行重建。近年来，深度学习被用于编码策略的设计以及提高光谱重建的速度和精度。</p><p>例如，联合掩码学习和展开网络等方法在最近的研究中被提出，以进一步优化振幅编码系统。端到端学习是一个有前途的方向，它使用神经网络处理整个重建管道。</p><h3 id="Coded-aperture-model"><a href="#Coded-aperture-model" class="headerlink" title="Coded-aperture model"></a>Coded-aperture model</h3><p>在振幅编码光谱成像中，编码孔径的模式决定了光的传播方式，具体可以用以下公式表示：</p><p>$$ g(x, y, \lambda) = f(x + lpha(\lambda - \lambda_c), y, \lambda) T(x + lpha(\lambda - \lambda_c), y, \lambda) $$</p><p>此处，$lpha$ 是校准系数，$\lambda_c$ 为色散中心波长。接下来，通过对波长进行积分，可以得到检测器上测量到的强度：</p><p>$$ g(x, y) = \int_{\Lambda} f(x + lpha(\lambda - \lambda_c), y, \lambda) T(x + lpha(\lambda - \lambda_c), y, \lambda) d \lambda $$</p><p>深度学习技术可以通过优化编码孔径的设计、提高重建精度等方式，显著提升光谱图像的重建速度。</p><p><img src="https://www.nature.com/articles/s41377-022-00743-6/figures/2" alt="CASSI架构"></p><h2 id="相位编码光谱成像"><a href="#相位编码光谱成像" class="headerlink" title="相位编码光谱成像"></a>相位编码光谱成像</h2><p>相位编码方法使用衍射光学元件（DOE）对光线的相位进行编码，从而获取光谱信息。这种方法具有紧凑的系统结构，并且在光通量方面效率很高。深度学习被用于DOE的设计和重建算法，大大加快了光谱恢复的速度和精度。</p><h3 id="Diffraction-model"><a href="#Diffraction-model" class="headerlink" title="Diffraction model"></a>Diffraction model</h3><p>DOE光谱成像系统中的相位编码是通过卷积过程来实现的。具体地，点扩散函数（PSF）可以通过以下公式来表示：</p><p>$$ p_{\lambda}(x, y) \propto \mathcal{F}\left(A_{\lambda}(x’, y’) e^{i[\phi_{\lambda}(x’, y’) + \phi_h(x’, y’)]} e^{irac{\pi}{\lambda z}(x’^2 + y’^2)}<br>ight) $$</p><p>其中，$\mathcal{F}$ 表示傅里叶变换，$A_{\lambda}$ 是波的振幅，$\phi_h$ 是DOE的相位调制函数。通过深度学习，可以在DOE设计的基础上进一步提升光谱重建的精度。</p><p><img src="https://www.nature.com/articles/s41377-022-00743-6/figures/6" alt="DOE在光谱成像中的应用"></p><h2 id="波长编码光谱成像"><a href="#波长编码光谱成像" class="headerlink" title="波长编码光谱成像"></a>波长编码光谱成像</h2><p>波长编码光谱成像使用光学滤波器对不同波长的光进行编码，常见的例子包括RGB滤波器。通过训练卷积神经网络（CNN），可以从编码后的信号中重建出完整的光谱图像。这种方法在虚拟场景的渲染等领域具有广泛应用。</p><h3 id="Image-formation-model"><a href="#Image-formation-model" class="headerlink" title="Image formation model"></a>Image formation model</h3><p>波长编码的成像过程可以通过以下公式来描述：</p><p>$$ I_k(x, y) = \int_{\Lambda} E(\lambda) S(x, y, \lambda) Q_k(\lambda) D(\lambda) d \lambda $$</p><p>其中，$E(\lambda)$ 是场景照明光谱，$S(x, y, \lambda)$ 是场景反射光谱，$Q_k(\lambda)$ 是滤波器的传递曲线，$D(\lambda)$ 是摄像机的响应曲线。</p><h2 id="数据集和评估"><a href="#数据集和评估" class="headerlink" title="数据集和评估"></a>数据集和评估</h2><p>在推动该领域的发展过程中，一些公开的光谱数据集发挥了重要作用。这些数据集为深度学习模型的训练和评估提供了基准。常用的光谱图像重建评估指标包括PSNR、SSIM和光谱角图（SAM）。</p><h2 id="结论与未来方向"><a href="#结论与未来方向" class="headerlink" title="结论与未来方向"></a>结论与未来方向</h2><p>深度学习已经彻底改变了光谱成像领域，使得重建速度更快、精度更高，并显著减少了系统体积。未来的研究可能会集中于引入强化学习来优化网络架构，或通过变压器模型进一步提升性能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;光谱成像是一项强大的技术，在遥感、医学诊断等领域具有广泛的应用。传统的光谱成像方法，如扫帚式或推帚式扫描，尽管有效，但由于系统体积大和数据采</summary>
      
    
    
    
    <category term="技术博客" scheme="https://xccyzz.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="光谱成像" scheme="https://xccyzz.github.io/tags/%E5%85%89%E8%B0%B1%E6%88%90%E5%83%8F/"/>
    
    <category term="深度学习" scheme="https://xccyzz.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算成像" scheme="https://xccyzz.github.io/tags/%E8%AE%A1%E7%AE%97%E6%88%90%E5%83%8F/"/>
    
    <category term="高光谱成像" scheme="https://xccyzz.github.io/tags/%E9%AB%98%E5%85%89%E8%B0%B1%E6%88%90%E5%83%8F/"/>
    
    <category term="深度神经网络" scheme="https://xccyzz.github.io/tags/%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>延迟退休：全球背景与体制内视角的思考</title>
    <link href="https://xccyzz.github.io/2024/09/16/%E5%BB%B6%E8%BF%9F%E9%80%80%E4%BC%91%E6%94%B9%E9%9D%A9_%E5%8D%9A%E5%AE%A2/"/>
    <id>https://xccyzz.github.io/2024/09/16/%E5%BB%B6%E8%BF%9F%E9%80%80%E4%BC%91%E6%94%B9%E9%9D%A9_%E5%8D%9A%E5%AE%A2/</id>
    <published>2024-09-15T16:00:00.000Z</published>
    <updated>2024-09-16T13:00:02.337Z</updated>
    
    <content type="html"><![CDATA[<p>最近中国正式启动了延迟退休的改革，并引发了广泛讨论。2024年9月13日，全国人大常委会表决通过了关于实施渐进式延迟退休年龄的决定，计划从2025年开始逐步实施。未来15年内，男性的法定退休年龄将从原来的60岁延迟到63岁，而女性则将从50岁或55岁（视工种而定）分别延迟到55岁和58岁。这项改革是70多年来首次对职工法定退休年龄进行调整[^1][^2]。</p><p>延迟退休的背景很清晰：中国面临严峻的老龄化挑战，劳动力人口逐渐减少。实施延迟退休是为了减轻社会保障体系的负担，确保养老金的可持续性。同时，改革还设计了一系列激励措施，例如“晚退多得”的养老金政策，鼓励职工继续工作多缴费，从而获得更高的养老金[^3]。</p><h2 id="欧美国家的经验"><a href="#欧美国家的经验" class="headerlink" title="欧美国家的经验"></a>欧美国家的经验</h2><p>延迟退休这个话题在全球范围内并不新鲜。欧美许多国家，尤其是欧洲，早已实施了类似的政策。以德国为例，法定退休年龄从原来的65岁逐步提高至67岁，英国则是从65岁延迟到66岁，并计划继续上调。这些国家的决策背后，都有一个共同的现实驱动力——人口老龄化。我记得和一些国外同行交流时，他们提到，虽然政策在一定程度上保障了养老金体系的持续运转，但也带来了一些社会矛盾，比如年轻人就业机会减少、老年员工继续工作后健康保障压力加大等。这让我不禁反思，我们的延迟退休是否也会面临同样的问题？<br>在中国，老龄化问题同样严重。随着社会经济的发展和医疗水平的提升，人均寿命显著提高，而劳动年龄人口却不断减少，这使得我们不得不重新考虑如何平衡养老金支出和劳动力供给。我注意到这次中国的延迟退休政策中采取了<strong>“渐进式”和“弹性”</strong>的方式。所谓“渐进”，就是通过小幅度延迟，每年延长几个月，最终在十几年的时间里完成法定退休年龄的过渡。这样的设定显然是为了让大多数人有一个适应的过程，不至于因为突然的政策调整而带来强烈的反弹。<br>再者，这次改革还推出了<strong>“弹性退休”</strong>的概念，允许个人与单位协商延迟退休的时长，并且明确禁止强制或变相强制延迟。这在某种程度上舒缓了许多人对“被迫工作更久”的担忧。我和一些人私下聊过，有人觉得弹性政策能够让单位根据需要留住有经验的老员工，但也有人担心单位会变相压榨老员工继续工作。<br>然而，年轻人的就业问题确实不容忽视。延迟退休意味着岗位流动性下降，年轻人的上升空间可能会被压缩。欧美国家在实施类似政策时，特别是法国和意大利，曾因为“延迟退休”引发了大量的罢工和抗议。尽管中国的改革采取了渐进式的方式，但未来几年可能仍然会面临类似的社会问题。年轻人不仅要面对高竞争的就业环境，还要承受更长的职业等待期。如何平衡这个矛盾，将是未来政策调整的关键。</p><h2 id="体制内的感受"><a href="#体制内的感受" class="headerlink" title="体制内的感受"></a>体制内的感受</h2><p>作为体制内的人员，中国的延迟退休采取了<strong>渐进式</strong>和<strong>弹性退休</strong>的方式，给了大家缓冲和选择的空间。弹性退休的制度在职工和单位协商一致的情况下，可以延长退休时间，这对那些愿意继续工作的职工是个好消息[^5]。</p><h2 id="未来的挑战与思考"><a href="#未来的挑战与思考" class="headerlink" title="未来的挑战与思考"></a>未来的挑战与思考</h2><p>延迟退休在我国有其必要性，但实施过程中，如何保证政策的平稳过渡，特别是兼顾不同年龄层次职工的需求，将是关键。社会各方需形成共识，确保改革顺利推进。</p><p><img src="https://raw.githubusercontent.com/xccyzz/img/main/img/20240916204907.png" alt="延迟退休政策示意图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近中国正式启动了延迟退休的改革，并引发了广泛讨论。2024年9月13日，全国人大常委会表决通过了关于实施渐进式延迟退休年龄的决定，计划从2025年开始逐步实施。未来15年内，男性的法定退休年龄将从原来的60岁延迟到63岁，而女性则将从50岁或55岁（视工种而定）分别延迟到</summary>
      
    
    
    
    <category term="时政新闻" scheme="https://xccyzz.github.io/categories/%E6%97%B6%E6%94%BF%E6%96%B0%E9%97%BB/"/>
    
    
    <category term="延迟退休" scheme="https://xccyzz.github.io/tags/%E5%BB%B6%E8%BF%9F%E9%80%80%E4%BC%91/"/>
    
    <category term="中国社会保障" scheme="https://xccyzz.github.io/tags/%E4%B8%AD%E5%9B%BD%E7%A4%BE%E4%BC%9A%E4%BF%9D%E9%9A%9C/"/>
    
    <category term="养老金改革" scheme="https://xccyzz.github.io/tags/%E5%85%BB%E8%80%81%E9%87%91%E6%94%B9%E9%9D%A9/"/>
    
    <category term="体制内观察" scheme="https://xccyzz.github.io/tags/%E4%BD%93%E5%88%B6%E5%86%85%E8%A7%82%E5%AF%9F/"/>
    
    <category term="人口老龄化" scheme="https://xccyzz.github.io/tags/%E4%BA%BA%E5%8F%A3%E8%80%81%E9%BE%84%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>安装与配置 Butterfly 主题</title>
    <link href="https://xccyzz.github.io/2024/06/10/Butterfly_Theme_Hexo_Corrected/"/>
    <id>https://xccyzz.github.io/2024/06/10/Butterfly_Theme_Hexo_Corrected/</id>
    <published>2024-06-09T16:00:00.000Z</published>
    <updated>2024-06-10T03:02:23.017Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装与配置-Butterfly-主题"><a href="#安装与配置-Butterfly-主题" class="headerlink" title="安装与配置 Butterfly 主题"></a>安装与配置 Butterfly 主题</h1><p>Butterfly 是 Hexo 的一个漂亮主题，这篇博客将指导你如何安装和配置 Butterfly 主题，使你的博客更加美观。</p><h2 id="前言配置"><a href="#前言配置" class="headerlink" title="前言配置"></a>前言配置</h2><p>前言（Front-matter）用于为每个页面或文章定义变量。它放置在 Markdown 文件的顶部，并用 <code>---</code> 包围。</p><h3 id="页面前言"><a href="#页面前言" class="headerlink" title="页面前言"></a>页面前言</h3><p>页面的前言示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">页面标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-06-10</span></span><br><span class="line"><span class="attr">updated:</span> <span class="number">2024-06-10</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;page&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;页面描述&quot;</span></span><br><span class="line"><span class="attr">keywords:</span> [<span class="string">&quot;关键词1&quot;</span>, <span class="string">&quot;关键词2&quot;</span>]</span><br><span class="line"><span class="attr">top_img:</span> <span class="string">/path/to/image.jpg</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">katex:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">aside:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">aplayer:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">random:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="文章前言"><a href="#文章前言" class="headerlink" title="文章前言"></a>文章前言</h3><p>文章的前言配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-06-10</span></span><br><span class="line"><span class="attr">updated:</span> <span class="number">2024-06-10</span></span><br><span class="line"><span class="attr">tags:</span> [<span class="string">&quot;标签1&quot;</span>, <span class="string">&quot;标签2&quot;</span>]</span><br><span class="line"><span class="attr">categories:</span> [<span class="string">&quot;分类1&quot;</span>, <span class="string">&quot;分类2&quot;</span>]</span><br><span class="line"><span class="attr">keywords:</span> [<span class="string">&quot;关键词1&quot;</span>, <span class="string">&quot;关键词2&quot;</span>]</span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;文章描述&quot;</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">/path/to/image.jpg</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">/path/to/cover.jpg</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">toc_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">toc_style_simple:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">copyright_author:</span> <span class="string">&quot;作者姓名&quot;</span></span><br><span class="line"><span class="attr">copyright_author_href:</span> <span class="string">&quot;https://authorwebsite.com&quot;</span></span><br><span class="line"><span class="attr">copyright_url:</span> <span class="string">&quot;https://posturl.com&quot;</span></span><br><span class="line"><span class="attr">copyright_info:</span> <span class="string">&quot;一些权利保留&quot;</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">katex:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">aplayer:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">aside:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">abcjs:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="创建自定义页面"><a href="#创建自定义页面" class="headerlink" title="创建自定义页面"></a>创建自定义页面</h2><h3 id="标签页面"><a href="#标签页面" class="headerlink" title="标签页面"></a>标签页面</h3><p>创建标签页面的步骤：</p><ol><li>进入 Hexo 博客根目录。</li><li>运行命令 <code>hexo new page tags</code>。</li><li>修改 <code>source/tags/index.md</code>，添加以下前言：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-06-10</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">orderby:</span> <span class="string">random</span></span><br><span class="line"><span class="attr">order:</span> <span class="number">1</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="分类页面"><a href="#分类页面" class="headerlink" title="分类页面"></a>分类页面</h3><p>创建分类页面：</p><ol><li>进入 Hexo 博客根目录。</li><li>运行命令 <code>hexo new page categories</code>。</li><li>修改 <code>source/categories/index.md</code>，添加以下前言：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-06-10</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="友链页面"><a href="#友链页面" class="headerlink" title="友链页面"></a>友链页面</h3><p>添加友链页面：</p><ol><li>进入 Hexo 博客根目录。</li><li>运行命令 <code>hexo new page link</code>。</li><li>修改 <code>source/link/index.md</code>，添加以下前言：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">友链</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-06-10</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;link&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h4 id="添加友链"><a href="#添加友链" class="headerlink" title="添加友链"></a>添加友链</h4><p>在 <code>source/_data</code> 目录下创建 <code>link.yml</code> 文件，结构如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">&quot;最爱的网站&quot;</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">&quot;我最喜欢的网站合集&quot;</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;Hexo&quot;</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://hexo.io/logo.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">&quot;一个快速、简单而强大的博客框架&quot;</span></span><br></pre></td></tr></table></figure><h3 id="启用友链随机排序"><a href="#启用友链随机排序" class="headerlink" title="启用友链随机排序"></a>启用友链随机排序</h3><p>在 <code>source/link/index.md</code> 的前言中添加 <code>random: true</code> 以启用随机排序。</p><h2 id="画廊页面"><a href="#画廊页面" class="headerlink" title="画廊页面"></a>画廊页面</h2><p>设置画廊页面：</p><ol><li>运行 <code>hexo n page gallery</code>。</li><li>使用 <code>galleryGroup</code> 短代码组织图片：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span><br><span class="line">  &#123;% galleryGroup &#x27;壁纸&#x27; &#x27;美丽壁纸合集&#x27; &#x27;/Gallery/wallpaper&#x27; &#x27;https://example.com/wallpaper.png&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子页面"><a href="#子页面" class="headerlink" title="子页面"></a>子页面</h3><p>使用 <code>gallery</code> 短代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![图片1](https://example.com/image1.jpg)</span><br><span class="line">![图片2](https://example.com/image2.jpg)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><h2 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h2><p>在主题设置中启用 404 页面：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&quot;页面未找到&quot;</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">/path/to/background.jpg</span></span><br></pre></td></tr></table></figure><p>按照以上步骤配置 Butterfly 主题，可以让你的 Hexo 博客变得更加个性化和专业。更多详情请参考 <a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 官方文档</a>。</p><p><img src="https://example.com/butterfly-theme-screenshot.jpg" alt="Hexo Butterfly 主题"></p><p>标签：技术博客, Hexo, Butterfly主题, 网站配置, 博客美化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装与配置-Butterfly-主题&quot;&gt;&lt;a href=&quot;#安装与配置-Butterfly-主题&quot; class=&quot;headerlink&quot; title=&quot;安装与配置 Butterfly 主题&quot;&gt;&lt;/a&gt;安装与配置 Butterfly 主题&lt;/h1&gt;&lt;p&gt;Butter</summary>
      
    
    
    
    
    <category term="技术博客" scheme="https://xccyzz.github.io/tags/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://xccyzz.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>如何安装Google Earth Engine Python API</title>
    <link href="https://xccyzz.github.io/2024/06/10/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85Google_Earth_Engine_Python_API/"/>
    <id>https://xccyzz.github.io/2024/06/10/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85Google_Earth_Engine_Python_API/</id>
    <published>2024-06-09T16:00:00.000Z</published>
    <updated>2024-06-10T09:50:38.710Z</updated>
    
    <content type="html"><![CDATA[<p>在这篇博客中，我将根据<a href="https://courses.spatialthoughts.com/install-gee-python-api.html">Spatial Thoughts指南</a>详细介绍安装Google Earth Engine (GEE) Python API的步骤。包括设置Anaconda环境、安装必要的库以及配置认证。</p><h3 id="1-安装-Earth-Engine-API"><a href="#1-安装-Earth-Engine-API" class="headerlink" title="1. 安装 Earth Engine API"></a>1. 安装 Earth Engine API</h3><p><strong>步骤1：下载并安装Anaconda</strong></p><p>首先，下载适用于Python 3.7（或更高版本）的<a href="https://www.anaconda.com/products/distribution">Anaconda安装程序</a>。使用默认设置进行安装。确保安装路径不包含空格或非英文字符，以避免问题。</p><p><strong>步骤2：启动Anaconda Prompt</strong></p><ul><li><strong>Windows</strong>：搜索“Anaconda Prompt”并启动。</li><li><strong>Mac/Linux</strong>：打开一个终端窗口。</li></ul><p><strong>步骤3：创建新环境</strong></p><p>为避免与其他包冲突，创建一个名为<code>ee</code>的新环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name ee</span><br></pre></td></tr></table></figure><p>按<code>y</code>确认创建。</p><p><strong>步骤4：激活环境</strong></p><p>激活新创建的环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate ee</span><br></pre></td></tr></table></figure><p><strong>步骤5：安装 Earth Engine API</strong></p><p>从conda-forge安装Earth Engine API库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge earthengine-api</span><br></pre></td></tr></table></figure><p><strong>步骤6：安装额外的库</strong></p><p>安装<code>geemap</code>和<code>jupyterlab</code>库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge geemap</span><br><span class="line">conda install -c conda-forge jupyterlab</span><br></pre></td></tr></table></figure><h3 id="2-安装-Google-Cloud-CLI"><a href="#2-安装-Google-Cloud-CLI" class="headerlink" title="2. 安装 Google Cloud CLI"></a>2. 安装 Google Cloud CLI</h3><p>Google Earth Engine需要Google Cloud CLI进行认证。</p><p><strong>步骤1：下载并安装Google Cloud CLI</strong></p><p>按照<a href="https://cloud.google.com/sdk/docs/install">安装指南</a>为您的操作系统安装Google Cloud CLI。</p><p><strong>步骤2：初始化Google Cloud CLI</strong></p><p>通过运行以下命令配置<code>gcloud</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud init</span><br></pre></td></tr></table></figure><p>选择与您的GEE帐户关联的Google Cloud项目。</p><h3 id="3-认证"><a href="#3-认证" class="headerlink" title="3. 认证"></a>3. 认证</h3><p><strong>步骤1：激活环境</strong></p><p>确保您在<code>ee</code>环境中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate ee</span><br></pre></td></tr></table></figure><p><strong>步骤2：认证 Earth Engine API</strong></p><p>运行以下命令进行认证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">earthengine authenticate</span><br></pre></td></tr></table></figure><p>在浏览器中完成登录过程。</p><p><strong>步骤3：设置Google Cloud项目</strong></p><p>最后，设置您的Google Cloud项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">earthengine set_project &lt;project_name&gt;</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>要验证您的设置，请打开Jupyter Lab：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter lab</span><br></pre></td></tr></table></figure><p>在Jupyter Lab中，创建一个新笔记本并运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ee</span><br><span class="line"><span class="keyword">import</span> geemap</span><br></pre></td></tr></table></figure><p>如果没有错误，您的环境就已正确设置。</p><p><img src="https://courses.spatialthoughts.com/assets/img/jupyter_lab.png" alt="Jupyter Lab 界面"></p><p>通过这些步骤，您可以成功安装和配置Google Earth Engine Python API。祝您编码愉快！</p><p>有关更多详细信息，请参阅<a href="https://courses.spatialthoughts.com/install-gee-python-api.html">完整指南</a>。</p><hr><p>如果您在安装过程中遇到任何问题，请在下面留言，或参考指南中提供的故障排除提示。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在这篇博客中，我将根据&lt;a href=&quot;https://courses.spatialthoughts.com/install-gee-python-api.html&quot;&gt;Spatial Thoughts指南&lt;/a&gt;详细介绍安装Google Earth Engine (GEE</summary>
      
    
    
    
    <category term="技术博客" scheme="https://xccyzz.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Python" scheme="https://xccyzz.github.io/tags/Python/"/>
    
    <category term="Google Earth Engine" scheme="https://xccyzz.github.io/tags/Google-Earth-Engine/"/>
    
    <category term="安装指南" scheme="https://xccyzz.github.io/tags/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"/>
    
    <category term="API" scheme="https://xccyzz.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>本森小姐的甲虫——追寻内心的呼喊与成长</title>
    <link href="https://xccyzz.github.io/2024/06/10/%E6%9C%AC%E6%A3%AE%E5%B0%8F%E5%A7%90%E7%9A%84%E7%94%B2%E8%99%AB%E2%80%94%E2%80%94%E8%BF%BD%E5%AF%BB%E5%86%85%E5%BF%83%E7%9A%84%E5%91%BC%E5%96%8A%E4%B8%8E%E6%88%90%E9%95%BF/"/>
    <id>https://xccyzz.github.io/2024/06/10/%E6%9C%AC%E6%A3%AE%E5%B0%8F%E5%A7%90%E7%9A%84%E7%94%B2%E8%99%AB%E2%80%94%E2%80%94%E8%BF%BD%E5%AF%BB%E5%86%85%E5%BF%83%E7%9A%84%E5%91%BC%E5%96%8A%E4%B8%8E%E6%88%90%E9%95%BF/</id>
    <published>2024-06-09T16:00:00.000Z</published>
    <updated>2024-06-10T02:45:32.004Z</updated>
    
    <content type="html"><![CDATA[<p>最近读了《本森小姐的甲虫》，这本书真的给我带来了深刻的感悟和反思。这是一本充满冒险和探索精神的小说，讲述了主人公如何追寻内心深处的呼喊，克服恐惧，与大自然以及自己内心的镜像相处的故事。</p><p>书中的主人公玛格丽·本森是一位在二战后的伦敦生活的单身教师，她厌倦了自己单调无趣的生活，决定去追寻自己儿时的梦想——寻找传说中的新喀里多尼亚金甲虫。这个决定不仅改变了她的生活轨迹，也让她遇到了同样特别的同伴伊妮德·普里蒂&#8203;:citation[oaicite:5]{index=5}&#8203;&#8203;:citation[oaicite:4]{index=4}&#8203;。</p><p>玛格丽和伊妮德的旅程充满了挑战和考验。两位性格迥异的女性在旅途中经历了无数次冲突和和解，从互相不理解到成为生死之交的朋友，这种转变让人动容。伊妮德虽然看似轻浮，但她的乐观和坚韧深深地影响了玛格丽，使她学会了面对自己的恐惧和过去的阴影&#8203;:citation[oaicite:3]{index=3}&#8203;&#8203;:citation[oaicite:2]{index=2}&#8203;。</p><p>书中不仅有对友情和冒险的刻画，还有对战后创伤的细腻描绘。玛格丽和伊妮德都带着各自的伤痛踏上了这段旅程，通过互相扶持和理解，她们逐渐找到了内心的平静和勇气。这种情感的共鸣让我想起了我们每个人在生活中都会遇到的困境和挑战，正是这些经历让我们变得更加强大&#8203;:citation[oaicite:1]{index=1}&#8203;&#8203;:citation[oaicite:0]{index=0}&#8203;。</p><p>书中有许多经典的段落，以下是我最喜欢的十段：</p><ol><li><p>“她想起了父亲那本旧书里关于金甲虫的描述，那是她一生的梦想，未曾实现的梦想。” - 这一段描写了玛格丽对梦想的执着和追求。</p></li><li><p>“他们说我是个无趣的老处女，但我知道，我的心中有一片辽阔的森林，等待着被探索。” - 玛格丽的内心独白，展现了她对自我价值的坚定信念。</p></li><li><p>“伊妮德的笑容像阳光一样温暖，驱散了玛格丽心中的阴霾。” - 描绘了伊妮德对玛格丽的积极影响。</p></li><li><p>“在新喀里多尼亚的丛林中，她们不仅寻找甲虫，也找到了彼此的心灵慰藉。” - 友情和冒险的结合，让人动容。</p></li><li><p>“过去的伤痛让她们彼此更加珍惜现在的每一刻。” - 对战后创伤的反思和共鸣。</p></li><li><p>“她们在旅途中不断学习，不断成长，从未停下探索的脚步。” - 强调了成长和探索的重要性。</p></li><li><p>“她们经历了无数次风暴，但依然坚信，前方有光明。” - 坚韧和希望的象征。</p></li><li><p>“每个人的生命中都有一只未曾捕捉的金甲虫，那是我们心中的梦想。” - 梦想和追求的隐喻。</p></li><li><p>“在那个瞬间，她们明白了生命的真谛，勇敢追梦，无所畏惧。” - 对生命意义的深刻领悟。</p></li><li><p>“最终，她们不仅找到了金甲虫，也找到了内心的平静和满足。” - 旅程的终点，也是内心的归宿。</p></li></ol><p>《本森小姐的甲虫》通过幽默和深情的笔触，让我们看到了勇气、友情和梦想的力量。这本书不仅是一次冒险之旅，更是一次心灵的洗礼和成长。如果你也在寻找内心深处的呼喊，不妨一读这本书，或许你也能从中找到自己的答案。</p><p><img src="https://raw.githubusercontent.com/xccyzz/img/main/img/20240610104252.png" alt="本森小姐的甲虫"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近读了《本森小姐的甲虫》，这本书真的给我带来了深刻的感悟和反思。这是一本充满冒险和探索精神的小说，讲述了主人公如何追寻内心深处的呼喊，克服恐惧，与大自然以及自己内心的镜像相处的故事。&lt;/p&gt;
&lt;p&gt;书中的主人公玛格丽·本森是一位在二战后的伦敦生活的单身教师，她厌倦了自己单</summary>
      
    
    
    
    
    <category term="读书随笔" scheme="https://xccyzz.github.io/tags/%E8%AF%BB%E4%B9%A6%E9%9A%8F%E7%AC%94/"/>
    
    <category term="冒险" scheme="https://xccyzz.github.io/tags/%E5%86%92%E9%99%A9/"/>
    
    <category term="成长" scheme="https://xccyzz.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
    <category term="友情" scheme="https://xccyzz.github.io/tags/%E5%8F%8B%E6%83%85/"/>
    
    <category term="自我发现" scheme="https://xccyzz.github.io/tags/%E8%87%AA%E6%88%91%E5%8F%91%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>《长安的荔枝》读书心得</title>
    <link href="https://xccyzz.github.io/2024/06/10/%E9%95%BF%E5%AE%89%E7%9A%84%E8%8D%94%E6%9E%9D_%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97/"/>
    <id>https://xccyzz.github.io/2024/06/10/%E9%95%BF%E5%AE%89%E7%9A%84%E8%8D%94%E6%9E%9D_%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97/</id>
    <published>2024-06-09T16:00:00.000Z</published>
    <updated>2024-06-10T02:00:55.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《长安的荔枝》读书心得"><a href="#《长安的荔枝》读书心得" class="headerlink" title="《长安的荔枝》读书心得"></a>《长安的荔枝》读书心得</h1><p>《长安的荔枝》是马伯庸创作的一部历史小说，通过唐朝背景下的一个小人物李善德的视角，讲述了他在巨大压力下完成一项几乎不可能完成的任务——从岭南将新鲜荔枝运送到长安。这本书不仅展现了历史事件的宏大背景，还深入刻画了小人物在历史洪流中的挣扎与抗争。</p><p>李善德，这位小吏在接到任务后，面临着各种挑战和困境。他需要在极短的时间内，克服荔枝易腐的特性，跨越重重险阻将荔枝送到贵妃面前。故事的时间背景设置在天宝十四年，即安史之乱爆发的前夕，这一年也是唐朝由盛转衰的转折点&#8203;:citation[oaicite:17]{index=17}&#8203;&#8203;:citation[oaicite:16]{index=16}&#8203;。</p><p>书中不仅描写了荔枝转运过程中的种种艰难，还刻画了人物间深厚的情感和友谊。李善德在岭南得到了阿僮和苏谅的帮助，尤其是苏谅，这位商人提供了资金和人力支持，帮助李善德克服了许多困难。然而，在国家机器的碾压下，个人的努力显得渺小而无力&#8203;:citation[oaicite:15]{index=15}&#8203;&#8203;:citation[oaicite:14]{index=14}&#8203;。</p><p>马伯庸通过李善德的故事，展示了底层人物在面对权力和命运时的无奈与抗争，同时也对历史中的豪奢浮华进行了讽刺。书中充满了对人性、权力与命运的深刻探讨，通过一个小人物的视角，揭示了大时代中的微小与悲哀&#8203;:citation[oaicite:13]{index=13}&#8203;&#8203;:citation[oaicite:12]{index=12}&#8203;。</p><p>以下是书中的一些经典段落及我的体会：</p><ol><li>“流程那种东西，是弱者才要遵循的规矩。” 在权力面前，许多规则和程序都被随意更改，小人物的无奈尽显。</li><li>“就算失败，我也想知道自己倒在离终点多远的地方。” 这句话体现了李善德对命运的抗争精神。</li><li>“做官之道，其实就三句话，和光同尘，好处均沾，花花轿子众人抬。” 反映了官场的复杂和权力斗争。</li><li>“可我跑完这一路下来，却发现越接近成功，我的朋友就越少，内心就越愧疚。” 成功的代价常常是失去亲密的朋友和心中的安宁。</li><li>“一将功成万骨枯，其实一事功成，也是万头皆秃。” 成功背后是无数人的牺牲和付出。</li><li>“既是身临绝境，退无可退，何不向前拼死一搏，说不定还能搏出一点微茫希望。” 面对绝境时的勇敢和决心。</li><li>“这种人其实最讨厌，就像蚊子一样，一巴掌就能拍死，但流出的是你的血。” 对小人物的困境和无奈的形象比喻。</li><li>“他奔忙一场，那些人若心存歹意，他已死无葬身之地；若尚念一份人情，抬手也便救了。” 小人物的命运常常掌握在权贵的一念之间。</li><li>“和光同尘，雨露均沾，花花轿子众人抬。” 官场的现实写照。</li><li>“流水不争先，争的是滔滔不绝。” 强调持续努力的重要性。</li></ol><p>通过这些段落，我们可以看到马伯庸对历史和人性的深刻理解，也感受到小人物在大时代中的挣扎与抗争。这本书不仅是一部精彩的历史小说，更是一部关于人性、友谊和勇气的深刻作品&#8203;:citation[oaicite:11]{index=11}&#8203;&#8203;:citation[oaicite:10]{index=10}&#8203;&#8203;:citation[oaicite:9]{index=9}&#8203;。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《长安的荔枝》读书心得&quot;&gt;&lt;a href=&quot;#《长安的荔枝》读书心得&quot; class=&quot;headerlink&quot; title=&quot;《长安的荔枝》读书心得&quot;&gt;&lt;/a&gt;《长安的荔枝》读书心得&lt;/h1&gt;&lt;p&gt;《长安的荔枝》是马伯庸创作的一部历史小说，通过唐朝背景下的一个小人物</summary>
      
    
    
    
    <category term="阅读心得" scheme="https://xccyzz.github.io/categories/%E9%98%85%E8%AF%BB%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="人性" scheme="https://xccyzz.github.io/tags/%E4%BA%BA%E6%80%A7/"/>
    
    <category term="友情" scheme="https://xccyzz.github.io/tags/%E5%8F%8B%E6%83%85/"/>
    
    <category term="历史小说" scheme="https://xccyzz.github.io/tags/%E5%8E%86%E5%8F%B2%E5%B0%8F%E8%AF%B4/"/>
    
    <category term="马伯庸" scheme="https://xccyzz.github.io/tags/%E9%A9%AC%E4%BC%AF%E5%BA%B8/"/>
    
    <category term="唐朝" scheme="https://xccyzz.github.io/tags/%E5%94%90%E6%9C%9D/"/>
    
  </entry>
  
  <entry>
    <title>new post</title>
    <link href="https://xccyzz.github.io/2021/08/04/new-post1/"/>
    <id>https://xccyzz.github.io/2021/08/04/new-post1/</id>
    <published>2021-08-04T00:44:50.000Z</published>
    <updated>2024-09-16T13:33:52.362Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>高光谱卫星介绍</title>
    <link href="https://xccyzz.github.io/2021/08/04/%E9%AB%98%E5%85%89%E8%B0%B1%E5%8D%AB%E6%98%9F%E4%BB%8B%E7%BB%8D/"/>
    <id>https://xccyzz.github.io/2021/08/04/%E9%AB%98%E5%85%89%E8%B0%B1%E5%8D%AB%E6%98%9F%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-08-04T00:44:50.000Z</published>
    <updated>2021-10-04T13:07:18.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="资源一号02D卫星"><a href="#资源一号02D卫星" class="headerlink" title="资源一号02D卫星"></a>资源一号02D卫星</h2><p>该卫星于2019年09月12日发射，是我国科学家自主建造并成功运行的首颗高光谱业务卫星。</p><h2 id="环境一号-HJ-1A卫星"><a href="#环境一号-HJ-1A卫星" class="headerlink" title="环境一号 HJ-1A卫星"></a>环境一号 HJ-1A卫星</h2><p>“环境一号”卫星系统（环境与灾害监测预报小卫星星座，HJ-1）是由中国国务院批准立项、专门用于环境和灾害监测的对地观测系统，由两颗光学卫星（HJ-1A卫星与HJ-1B卫星）及一颗雷达卫星（HJ-1C卫星）组成，<span id="more"></span>拥有光学、红外、高光谱（部分网络资料亦将HJ-1A卫星视作超光谱卫星，但结合其具体参数，个人认为这里还是写作高光谱卫星合适）与微波等多种探测手段，具有大范围、全天候、全天时、动态的环境和灾害监测能力，初步满足我国大范围、多目标、多专题、定量化的环境遥感业务化运行的实际需要，在国家环境监测发展中具有里程碑意义，大大缓解我国对地观测数据的紧缺局面，提高中国环境生态变化、自然灾害发生和发展过程监测的能力，标志着中国环境监测进入卫星应用的时代。</p><p>其中，具有高光谱成像能力的HJ-1A卫星于2008年09月06日在太原卫星发射中心与HJ-1B卫星 “一箭双星”成功发射；HJ-1C卫星则于2012年11月19日在太原卫星发射中心发射。</p><p>HJ-1A卫星搭载了电荷耦合元件（Charge Coupled Device，CCD）相机和高光谱成像仪（Hyper Spectral Imager，HSI，亦有译作超光谱成像仪），轨道高度为649.093 km，重复周期为31天。HIS具有115个波段，覆盖450 nm至950 nm波段范围，空间分辨率为100 m。</p><h2 id="珠海一号-OHS高光谱卫星"><a href="#珠海一号-OHS高光谱卫星" class="headerlink" title="珠海一号 OHS高光谱卫星"></a>珠海一号 OHS高光谱卫星</h2><p>珠海一号卫星星座（指发射入轨、正常工作的卫星集合）是由我国珠海欧比特宇航科技股份有限公司发射并运营的商业遥感微纳卫星星座，由34颗卫星共同组成，包括视频卫星（OVS-1视频卫星2颗与OVS-2视频卫星10颗）、高光谱卫星（OHS高光谱卫星10颗）、雷达卫星（OSS雷达卫星2颗）、高分光学卫星（OUS高分光学卫星2颗）与红外卫星（OIS红外卫星8颗）。</p><p>其中，OHS（Orbita HyperSpectral）高光谱卫星于2018年04月26日，在酒泉卫星发射中心首次发射，由长征十一号固体运载火箭以“一箭五星”方式送入太空，5颗卫星包括4颗OHS高光谱卫星（OHS-01/02/03/04）与1颗OVS-2视频卫星；这是珠海一号02组卫星，其与在轨的2颗珠海一号01组视频卫星（于2017年06月15日发射）形成组网；2019年09月19日，再一次在酒泉卫星发射中心利用长征十一号运载火箭，采取“一箭五星”方式成功将珠海一号03组5颗卫星发射升空。珠海一号03组卫星同样包括4颗OHS高光谱卫星与1颗视频卫星。</p><p>OHS高光谱卫星搭载多个OHS互补金属氧化物半导体（Complementary Metal-Oxide-Semiconductor，CMOS）传感器，空间分辨率为10 m，成像范围为150 km*2500 km，在400 nm至1000 nm波段范围内共有256个谱段，其中可任选32个作为最终产品中的波段信息。在10颗OHS高光谱卫星全部发射升空后，可实现2天的空间分辨率，对特定区域甚至可达1天内重访。目前，这一由中国首家民营上市公司建设并运营的高光谱卫星星座数据已达世界一流水平，具备对植被、水体、海洋等地物进行精准定量分析能力，已在军民融合、自然资源监测、环保监测、海洋监测、农作物面积统计及估产、城市规划等领域得到示范应用，受到部队、政府、行业等诸多用户好评。</p><h2 id="高分五号-可见短波红外高光谱相机"><a href="#高分五号-可见短波红外高光谱相机" class="headerlink" title="高分五号 可见短波红外高光谱相机"></a>高分五号 可见短波红外高光谱相机</h2><p>2018年05月09日，高分五号卫星（Gaofen-5，GF-5）在我国太原卫星发射中心由长征四号丙运载火箭搭载，成功发射。</p><p>高分五号卫星是我国“高分辨率对地观测系统重大专项”（即《国家中长期科学和技术发展规划纲要（2006—2020年）》中确定的16个重大专项之一）中7颗民用卫星内唯一一颗高光谱卫星，也是这一重大科技专项中搭载载荷最多、光谱分辨率最高的卫星，同时是世界首颗实现对大气和陆地综合观测的全谱段高光谱卫星.</p><p>其设计为太阳同步轨道，轨道高度约705km；搭载了大气痕量气体差分吸收光谱仪（Environmental Trace Gases Monitoring Instrument，EMI）、大气主要温室气体监测仪（Greenhouse Gases Monitoring Instrument，GMI）、大气多角度偏振探测仪（Directional Polarimetric Camera，DPC）、大气环境红外甚高分辨率探测仪（Atmospheric Infrared Ultra-spectral Sounder，AIUS）、可见短波红外高光谱相机（Advanced Hyperspectral Imager，AHSI）与全谱段光谱成像仪（Visual and Infrared Multspectral Sensor，VIMS）等共6台载荷，可对大气气溶胶、二氧化硫、二氧化氮、二氧化碳、甲烷等气体物质，以及水华、水质、核电厂温排水、陆地植被、秸秆焚烧、城市热岛等多个地表环境要素进行实时监测。</p><p>其中，AHSI共具有330个波段，光谱范围覆盖400 nm至2500 nm波长区域，包括150个V-NIR波段（光谱分辨率为5 nm）与180个SWIR波段（光谱分辨率为10 nm）；空间分辨率为30 m。目前高分五号由于故障已经停止服役.</p><p><img src="https://pic2.zhimg.com/80/v2-c712aa2bf5681e989b09e17097628608_1440w.jpg?source=1940ef5c" alt="主要载荷参数对照表"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;资源一号02D卫星&quot;&gt;&lt;a href=&quot;#资源一号02D卫星&quot; class=&quot;headerlink&quot; title=&quot;资源一号02D卫星&quot;&gt;&lt;/a&gt;资源一号02D卫星&lt;/h2&gt;&lt;p&gt;该卫星于2019年09月12日发射，是我国科学家自主建造并成功运行的首颗高光谱业务卫星。&lt;/p&gt;
&lt;h2 id=&quot;环境一号-HJ-1A卫星&quot;&gt;&lt;a href=&quot;#环境一号-HJ-1A卫星&quot; class=&quot;headerlink&quot; title=&quot;环境一号 HJ-1A卫星&quot;&gt;&lt;/a&gt;环境一号 HJ-1A卫星&lt;/h2&gt;&lt;p&gt;“环境一号”卫星系统（环境与灾害监测预报小卫星星座，HJ-1）是由中国国务院批准立项、专门用于环境和灾害监测的对地观测系统，由两颗光学卫星（HJ-1A卫星与HJ-1B卫星）及一颗雷达卫星（HJ-1C卫星）组成，</summary>
    
    
    
    
    <category term="RS" scheme="https://xccyzz.github.io/tags/RS/"/>
    
  </entry>
  
</feed>
